# PHP CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-php/ for more details
#
version: 2.1
orbs:
    aws-cli: circleci/aws-cli@0.1.16

jobs:
    build:
        docker:
            - image: circleci/php:7.3-node-browsers

        steps:
            - checkout
            - run: sudo apt update # PHP CircleCI 2.0 Configuration File# PHP CircleCI 2.0 Configuration File sudo apt install zlib1g-dev libsqlite3-dev
            - run: sudo docker-php-ext-install zip

            # Download and cache dependencies
            - restore_cache:
                  keys:
                      # "composer.lock" can be used if it is committed to the repo
                      - v1-dependencies-{{ checksum "composer.lock" }}
                      # fallback to using the latest cache if no exact match is found
                      - v1-dependencies-

            - run: composer install -n --prefer-dist

            - save_cache:
                  key: v1-dependencies-{{ checksum "composer.lock" }}
                  paths:
                      - ./vendor
            - run:
                  name: Unit Test
                  command: |
                      php bin/phpunit --group smoke

    deploy:
        executor: aws-cli/default
        docker:
            - image: circleci/php:7.3-node-browsers
        steps:
            - checkout
            - aws-cli/install
            - aws-cli/setup:
                  profile-name: deployer
                  aws-access-key-id: AWS_ACCESS_KEY_ID
                  aws-secret-access-key: AWS_SECRET_ACCESS_KEY
                  aws-region: AWS_REGION
            - run:
                name: Deploy to EBS
                command: |
                    # Get current version of latest env from ebs
                    export ALL_VERSIONS=$(aws elasticbeanstalk describe-application-versions --profile deployer)
                    export CURRENT_VERSION=$(echo $ALL_VERSIONS | jq -r '.ApplicationVersions[0].VersionLabel')

                    # Increment version number by 1
                    export NEXT_VERSION=$(($CURRENT_VERSION + 1))
                    export APPLICATION_NAME=$(echo $ALL_VERSIONS | jq -r '.ApplicationVersions[0].ApplicationName')

                    #Zip project files excluding vendor and copy to ebs S3 bucket
                    zip ./sourcebundle.zip -r * .[^.]* -x "vendor/*"
                    aws s3 cp sourcebundle.zip s3://elasticbeanstalk-eu-west-1-444397649125/sourcebundle.zip --profile deployer

                    #Cleanup
                    rm -rf ./sourcebundle.zip

                    #Create new version of App using zip in S3
                    aws elasticbeanstalk create-application-version --profile deployer --application-name $APPLICATION_NAME --version-label $NEXT_VERSION --source-bundle S3Bucket="elasticbeanstalk-eu-west-1-444397649125",S3Key="sourcebundle.zip" --auto-create-application

                    export ENVIRONMENTS=$(aws elasticbeanstalk describe-environments --profile deployer --application-name $APPLICATION_NAME)
                    export OLDEST_UPDATED_ENV=$(echo $ENVIRONMENTS | jq -r '.Environments | sort_by(.DateUpdated) | .[0].EnvironmentName')
                    export NEWEST_UPDATED_ENV=$(echo $ENVIRONMENTS | jq -r '.Environments | sort_by(.DateUpdated) | .[-1].EnvironmentName')
                    export SOLUTION_STACK_NAME=$(echo $ENVIRONMENTS | jq -r '.Environments | sort_by(.DateUpdated) | .[0].SolutionStackName')

                    #Update either green or blue environment of app based on which is oldest
                    aws elasticbeanstalk update-environment --profile deployer --application-name $APPLICATION_NAME --environment-name $OLDEST_UPDATED_ENV --version-label $CURRENT_VERSION --solution-stack-name "$SOLUTION_STACK_NAME"

                    function getStatus() {
                    echo `aws elasticbeanstalk describe-environments \
                        --profile deployer --application-name $APPLICATION_NAME --environment-name $OLDEST_UPDATED_ENV |\
                        jq -r '.Environments | .[]?' | jq -r '.Status'`
                    }

                    sleep_time_seconds=5
                    max_iterations_count=$((120/$sleep_time_seconds))
                    iterations=0

                    echo "Waiting for a maximum of 120 seconds for $OLDEST_UPDATED_ENV to become ready"

                    status=$(getStatus)
                    while [[ ( $status != "Ready" ) && ( $iterations -lt $max_iterations_count ) ]]; do
                        status=$(getStatus)
                        echo $status
                        sleep $sleep_time_seconds
                        ((iterations+=1))
                    done

            - run: sudo apt update # PHP CircleCI 2.0 Configuration File# PHP CircleCI 2.0 Configuration File sudo apt install zlib1g-dev libsqlite3-dev
            - run: sudo docker-php-ext-install zip

            - restore_cache:
                 keys:
                     # "composer.lock" can be used if it is committed to the repo
                     - v1-dependencies-{{ checksum "composer.lock" }}
                     # fallback to using the latest cache if no exact match is found
                     - v1-dependencies-

            - run: composer install -n --prefer-dist

            - save_cache:
                 key: v1-dependencies-{{ checksum "composer.lock" }}
                 paths:
                     - ./vendor
            - run:
                 name: Smoke tests
                 command: |
                     export TEST_BASE_URL=$(aws elasticbeanstalk describe-environments --profile deployer --environment-names $OLDEST_UPDATED_ENV | jq -r '.Environments | sort_by(.DateUpdated) | .[0].EndpointURL')

                     echo $TEST_BASE_URL

                     export BEHAT_PARAMS="{\"extensions\": {\"Behat\\\\MinkExtension\\\\ServiceContainer\\\\MinkExtension\": {\"base_url\": \"$TEST_BASE_URL\"}}}"

                     echo $BEHAT_PARAMS

                     vendor/bin/behat

            - run:
                  name: Swap Cnames
                  command: |
                      #Swap CNAMES - look at which env should be which

                      export APPLICATION_NAME=$(aws elasticbeanstalk describe-application-versions --profile deployer | jq -r '.ApplicationVersions[0].ApplicationName')

                      export ENVIRONMENTS=$(aws elasticbeanstalk describe-environments --profile deployer --application-name $APPLICATION_NAME)
                      export APPLICATION_NAME=$(echo $ENVIRONMENTS | jq -r '.Environments | sort_by(.DateUpdated) | .[0].ApplicationName')
                      export OLDEST_UPDATED_ENV=$(echo $ENVIRONMENTS | jq -r '.Environments | sort_by(.DateUpdated) | .[0].EnvironmentName')
                      export NEWEST_UPDATED_ENV=$(echo $ENVIRONMENTS | jq -r '.Environments | sort_by(.DateUpdated) | .[-1].EnvironmentName')

                      aws elasticbeanstalk swap-environment-cnames --profile deployer --source-environment-name $OLDEST_UPDATED_ENV --destination-environment-name $NEWEST_UPDATED_ENV
workflows:
    version: 2
    build-deploy:
        jobs:
            - build
            - deploy:
                  requires:
                      - build
                #   filters:
                #       branches:
                #           only: master
