# PHP CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-php/ for more details
#
version: 2.1
orbs:
    aws-cli: circleci/aws-cli@0.1.16

jobs:
    build:
        docker:
            - image: circleci/php:7.2-node-browsers

        steps:
            - checkout
            - run: sudo apt update # PHP CircleCI 2.0 Configuration File# PHP CircleCI 2.0 Configuration File sudo apt install zlib1g-dev libsqlite3-dev
            - run: sudo docker-php-ext-install zip

            # Download and cache dependencies
            - restore_cache:
                  keys:
                      # "composer.lock" can be used if it is committed to the repo
                      - v1-dependencies-{{ checksum "composer.lock" }}
                      # fallback to using the latest cache if no exact match is found
                      - v1-dependencies-

            - run: composer install -n --prefer-dist

            - save_cache:
                  key: v1-dependencies-{{ checksum "composer.lock" }}
                  paths:
                      - ./vendor

    deploy:
        executor: aws-cli/default
        steps:
            - checkout
            - aws-cli/install
            - aws-cli/setup:
                  profile-name: deployer
                  aws-access-key-id: AWS_ACCESS_KEY_ID
                  aws-secret-access-key: AWS_SECRET_ACCESS_KEY
                  aws-region: AWS_REGION
            - run:
                name: Deploy to EBS
                command: |
#                    Get current version of latest env from ebs
                    all_versions=$(aws elasticbeanstalk describe-application-versions --profile deployer)
                    current_version=$(echo $all_versions | jq '.ApplicationVersions[0].VersionLabel')

#                    Increment version number by 1 and export to $BASH_ENV
                    echo "export VERSION=$(($current_version + 1))" >> $BASH_ENV
                    source $BASH_ENV

#                    Zip project files excluding vendor and copy to ebs S3 bucket
                    zip ./sourcebundle.zip -r * .[^.]* -x "vendor/*"
                    aws s3 cp sourcebundle.zip s3://elasticbeanstalk-eu-west-2-444397649125/sourcebundle.zip --profile deployer

#                    Create new version of App using zip in S3
                    aws elasticbeanstalk create-application-version --application-name blue-green-deployments --version-label $VERSION --source-bundle S3Bucket="elasticbeanstalk-eu-west-2-444397649125",S3Key="sourcebundle.zip" --auto-create-application --profile deployer

#                    Update either green or blue environment of app based on which is oldest
                    aws elasticbeanstalk update-environment --application-name blue-green-deployments --environment-name $env_to_update --version-label $VERSION --solution-stack-name "64bit Amazon Linux 2018.03 v2.8.15 running PHP 7.2" --profile deployer

#                   Swap CNAMES
                    source_env_name=$(aws elasticbeanstalk describe-environments --profile learning | jq '.Environments | sort_by(.DateUpdated)[0].EnvironmentName')
                    destination_env_name=$([ "$env_to_update" = "BlueGreenDeployments-blue" ] && echo "BlueGreenDeployments-green" || echo "BlueGreenDeployments-blue")
                    aws elastibeanstalk swap-environment-cnames --source-environment-name source_env_name --destination-environment-name destination_env_name

#                    Cleanup
                    rm -rf ./sourcebundle.zip

workflows:
    version: 2
    build-deploy:
        jobs:
            - build
            - deploy:
                  requires:
                      - build
                  filters:
                      branches:
                          only: master
